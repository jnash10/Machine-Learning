
"""
Created on Thu Feb 17 10:46:24 2022

@author: Tanmay Basu
"""

import csv
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from collections import Counter
from sklearn.model_selection import GridSearchCV 
from sklearn.pipeline import Pipeline
from sklearn.ensemble import AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn import svm 
from sklearn.linear_model import LogisticRegression 
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_selection import SelectKBest,chi2
from sklearn.model_selection import StratifiedKFold, train_test_split
from sklearn.metrics import classification_report
import pylab as p


# Half Moons Data  Generation
np.random.seed(10**7)
data, labels = datasets.make_moons(n_samples=5000, noise=0.2)

plt.scatter(data[:,0],data[:,1],c=labels,cmap=plt.cm.Accent)
plt.title("Half Moons Data")
plt.show()

# Splitting into Training and Test Data

trn_data, tst_data, trn_cat, tst_cat = train_test_split(data, labels, test_size=0.10, random_state=42,stratify=labels)   

trn_cat=[str(x) for x in trn_cat]
print('\n Training Data Class  Names:\t['+','.join(list(Counter(trn_cat).keys()))+']\n')
clas_labels=[str(x) for  x in list(Counter(trn_cat).values())]
print(' Instances in Individual Classes: '+','.join(clas_labels))

tst_cat=[str(x) for x in tst_cat]
print('\n Test Data Class  Names:\t['+','.join(list(Counter(tst_cat).keys()))+']\n')
clas_labels=[str(x) for  x in list(Counter(tst_cat).values())]
print(' Instances in Individual Classes: '+','.join(clas_labels))

     # Classification
     
clf1 = LogisticRegression(solver='liblinear',class_weight='balanced') 
clf2 = svm.SVC(class_weight='balanced',kernel='linear',C=1,probability=True)
clf3 = svm.SVC(class_weight='balanced',kernel='rbf',C=1,probability=True)
clf4 = svm.SVC(class_weight='balanced',kernel='poly',C=1,probability=True)
clf5 = svm.SVC(class_weight='balanced',kernel='sigmoid',C=0.005,probability=True)

clf5.fit(trn_data,trn_cat)
predicted=clf5.predict(tst_data)
print(classification_report(tst_cat, predicted, target_names=['0','1']))

   # Clustering 
   
from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=2, random_state=0).fit(data)
print('\n The cluster labels generated by K-means clustering technique is: ') 
print(kmeans.labels_)

from sklearn.cluster import AgglomerativeClustering
clustering = AgglomerativeClustering(linkage='single').fit(data)
print('\n The cluster labels generated by the given agglomerative clustering technique is: ')
print(clustering.labels_)


